🤯️🤯️🤯️New Project?🤯️🤯️🤯️
1) dotnet new mvc --no-https

🤯️🤯️🤯️Run Project?🤯️🤯️🤯️
1)  dotnet watch run










🤯️🤯️🤯️Add Database?🤯️🤯️🤯️
1) dotnet add package Pomelo.EntityFrameworkCore.MySql -v 2.2.0
2) in Models folder:
	new file: YourContext.cs and add:
//////////////////////////////////////////////
	using Microsoft.EntityFrameworkCore;
 
namespace YourNamespace.Models   <----- change namespace
{
    public class MyContext : DbContext
    {
        // base() calls the parent class' constructor passing the "options" parameter along
        public MyContext(DbContextOptions options) : base(options) { }
    }
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

3) Register your context class as a service
	In Startup.cs:

    using MyProject.Models;    <-------- add
    using Microsoft.EntityFrameworkCore; <-----------add
    public class Startup
    {
        // Other startup code
        public void ConfigureServices(IServiceCollection services)
        {
            string mySqlConnection = "server=localhost;userid=root;password=root;port=3306;database=mydb;SslMode=None"; <----add
            services.AddDbContext<MyContext>(options => options.UseMySql(mySqlConnection)); <----add
            // Add other services
        }
        // Other startup code
    }   

delete:
	services.Configure<CookiePolicyOptions>(options =>
	{
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => true;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });
&&&&&&&&&&&&&&&&&&
	app.UseCookiePolicy();


3) for each table we want to work with, we will create an associated Model class
	Example (User.cs)
///////////////////////////////////////////////////////////////////////////
    
    using System.ComponentModel.DataAnnotations;
    using System;
    using System.ComponentModel.DataAnnotations.Schema; <----- if comparing passwords or other fields
    namespace MyProject.Models
    {
        public class User
        {
            // auto-implemented properties need to match the columns in your table
            // the [Key] attribute is used to mark the Model property being used for your table's Primary Key
            [Key]
            public int UserId { get; set; }
            // MySQL VARCHAR and TEXT types can be represeted by a string
            public string FirstName { get; set; }
            public string LastName { get; set; }
            public string Email { get; set; }
            public string Password { get; set; }
            // The MySQL DATETIME type can be represented by a DateTime
            public DateTime CreatedAt {get;set;}
            public DateTime UpdatedAt {get;set;}
        }
    }

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

4) DbSets:  remember that it is case insensitive...

////////////////////////////////////////////
 public DbSet<User> Users {get;set;} <--------  in public class MyContext
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


5) Dependency Injection(to our controller)
example:
/////////////////////////////////////////////
using Microsoft.EntityFrameworkCore;
using YourNamespace.Models;
using System.Linq;
// Other using statements
namespace MyProject.Controllers
{
    public class HomeController : Controller
    {
        private MyContext dbContext;              <------add
     
        // here we can "inject" our context service into the constructor
        public HomeController(MyContext context)   <-------add
        {
            dbContext = context;
        }
     
        [HttpGet]
        [Route("")]
        public IActionResult Index()
        {
            List<User> AllUsers = dbContext.Users.ToList();       <------ how to grab all
            
            return View();
        }
    }
 }
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

6) Securing Your Connection String
In appsettings.json include the following, changing your port, userid, password and database as needed below Allowed Hosts while adding a comma:

////////////////////////////////////////////////////
{
    "DBInfo":
    {
        "Name": "MySQLconnect",
        "ConnectionString": "server=localhost;userid=root;password=root;port=3306;database=mydb;SslMode=None"
    }
}
////////////////////////////////////////////////////////

7)   Startup.cs:
///////////////////////////////////////////////////////////
// other using statements
using Microsoft.Extensions.Configuration;
public class Startup
{
    // This public getter will be how you access the data from appsettings.json
    // To access the connection string itself, you would use the following:
    // Configuration["DBInfo:ConnectionString"]
    public IConfiguration Configuration {get;}       
    // Here we will "inject" the default IConfiguration service, which will bind to appsettings.json by default
    // and then assign it to the Configuration property.  This happens at the startup of our application.
    public Startup(IConfiguration configuration)
    {
    	Configuration = configuration;
    }
    
    // Now we may use the connection string itself, bound to Configuration, to pass the required connection
    // credentials to MySQL
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext<MyContext>(options => options.UseMySql(Configuration["DBInfo:ConnectionString"])); <------add
        // Add other services
    }
}


8)  Make a migration folder.  Run in terminal:
$ dotnet ef migrations add YourMigrationName

9)  Perform the migrations:
dotnet ef database update












🤯️🤯️🤯️Add a form?🤯️🤯️🤯️

1) In HTML
	<form asp-action="MethodName" asp-controller="Home" method="post">
		<label asp-for="Name"></label>
		<input asp-for="Name">
		<span asp-validation-for="Name"></span>
		<input value="Add Name" type="submit>
	  </form>



🤯️🤯️🤯️Add session?🤯️🤯️🤯️

1)  In Startup.cs
		public void ConfigureServices(IServiceCollection services)
	{
	    services.AddSession();    // add this line
	    services.AddMvc();
	}
	// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
	public void Configure(IApplicationBuilder app, IHostingEnvironment env)
	{
	    // other configurations
	    app.UseSession();    // add this line
	    app.UseMvc();        // make sure UseMvc comes last!!
	}

2.  In controller:
	using Microsoft.AspNetCore.Http;

3.  And now in our controller methods we can utilize session:
	// *Inside controller methods*
	// To store a string in session we use ".SetString"
	// The first string passed is the key and the second is the value we want to retrieve later
	HttpContext.Session.SetString("UserName", "Samantha");
	// To retrieve a string from session we use ".GetString"
	string LocalVariable = HttpContext.Session.GetString("UserName");
	 
	// To store an int in session we use ".SetInt32"
	HttpContext.Session.SetInt32("UserAge", 28);
	// To retrieve an int from session we use ".GetInt32"
	int? IntVariable = HttpContext.Session.GetInt32("UserAge");

4.  Need to clear session? Use the clear method
	HttpContext.Session.Clear();

5.  Access Session in your views:
	// in your Controller
	ViewBag.Count = HttpContext.Session.GetInt32("count");

	<!-- in your View -->
	<h2>You have clicked the button @ViewBag.Count</h2>

6.  Modify session:
	using Newtonsoft.Json;
	// Somewhere in your namespace, outside other classes
	public static class SessionExtensions
	{
	    // We can call ".SetObjectAsJson" just like our other session set methods, by passing a key and a value
	    public static void SetObjectAsJson(this ISession session, string key, object value)
	    {
		// This helper function simply serializes theobject to JSON and stores it as a string in session
		session.SetString(key, JsonConvert.SerializeObject(value));
	    }
	       
	    // generic type T is a stand-in indicating that we need to specify the type on retrieval
	    public static T GetObjectFromJson<T>(this ISession session, string key)
	    {
		string value = session.GetString(key);
		// Upon retrieval the object is deserialized based on the type we specified
		return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);
	    }
	}

7.  Two additional methods available wherever we're using session.  Here are examples:
	// *Inside a controller method*
	List<object> NewList = new List<object>();
	 
	HttpContext.Session.SetObjectAsJson("TheList", NewList);
	 
	// Notice that we specify the type ( List ) on retrieval
	List<object> Retrieve = HttpContext.Session.GetObjectFromJson<List<object>>("TheList");
